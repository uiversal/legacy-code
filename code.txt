Ownership
O++	Public Domain / MIT / Apache
O+	Copyleft
O	We own it. But if we go under, you get the source code.
O-	We own it. You get a license we can revoke at any time.
O--	We own it. We don't sell it. You can only rent it.
!O	You use our appliance / cloud service

Source Code
S++	The source code is public and you can change it
S+	The source code is public
S	The source code leaked a while ago
S-	We let your government view the source code
S--	The source code is secret
!S	We lost the source code

Intent
I+++	I make actual guarantees
I++	I have done this multiple times before. I know what I'm doing.
I+	I had to adapt the design a bit over time
I	I tried to avoid security bugs while writing this
I-	Look, they paid me to do this
I--	The guy left. Code now maintained by team in India
!I	I have no idea what I'm doing

Correctness
C+++	We have a correctness proof and you can understand / verify it
C++	We have a correctness proof
C+	No open bugs, 100% test coverage and we do regular code audits
C	We try to fix bugs that our users tell us about
C-	We have a bug backlog
C--	At some point we are planning to have a bug tracking system
!C	That's not really a bug, that's just a crash!

Engineering
E+++	Least Privilege, Privilege Separation, TCB minimised
E++	We sandbox ourselves away so nothing bad can happen
E	We try to detect bad arguments
E-	Wellâ€¦ we fix bugs. That's good, right?
E--	We just do what we're told. You call us wrong, that's on you!
E---	We run as root / in the kernel
E----	We sell it as an appliance so you don't see how bad it is
!E	We do a daily AI malware scan of our blockchain

Maintenance
M!	Author is Don Knuth / Dan Bernstein, makes no mistakes
M+	Project is feature-complete, gets occasional
 security updates
M	Project gets updated regularly
M-	People send pull requests / patches to mailing list
M--	Vendor publishes quarterly patch roundup with 512 fixes each
M---	Author killed project. Unofficial forks / backups still around
!M	Author left / dead, project abandoned

Volatility
V!	Software is perfect, needed no updates since 1993
V++	Like V+ but has a way to notify you of new versions
V+	Regular patches and updates but you can't tell the difference
V-	Updating is such a hassle that backporting patches is a thing
V--	The new version broke so much, most people use the old one
V---	Agile. 5 updates/day, half of them break production
!V	Support ended

Protocol/Spec
PS++	The spec is public, ehrt and precise
PS	The spec is ok but interoperability is a bitch
PS-	The spec is so large, nobody implements all of it
PS--	The spec cannot be implemented securely
PS---	There is a spec but it's paywalled
!PS	The author made it up as he went

Dependencies
!D	No dependencies. You boot our image directly.
D++	We depend only on things that come with the system
D+	We depend on sqlite and libz
D	We use somebody's Docker image from the internet
D-	We don't even have a list of the dependencies
D--	We load extensions dynamically from the internet
D---	Uses vendor-specific lock-in APIs/features